{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\armi_\\\\Downloads\\\\Projects\\\\bookstore-app\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.jsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\n\n/**\r\n * Wrap any route that needs authentication.\r\n * @param {{ children: React.ReactNode, role?: string }} props\r\n *    role: optional, e.g. \"admin\"\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  children,\n  role\n}) {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    // not logged in\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }, this);\n  }\n  let payload;\n  try {\n    payload = jwtDecode(token);\n  } catch (err) {\n    // bad token\n    console.error('Invalid JWT:', err);\n    localStorage.removeItem('token');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  // if we require a specific role, but the user doesn't have it:\n  if (role && payload.role !== role) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  // everything’s OK:\n  return children;\n}\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jwtDecode","jsxDEV","_jsxDEV","ProtectedRoute","children","role","token","localStorage","getItem","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","payload","err","console","error","removeItem","_c","$RefreshReg$"],"sources":["C:/Users/armi_/Downloads/Projects/bookstore-app/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { jwtDecode } from 'jwt-decode'\r\n\r\n/**\r\n * Wrap any route that needs authentication.\r\n * @param {{ children: React.ReactNode, role?: string }} props\r\n *    role: optional, e.g. \"admin\"\r\n */\r\nexport default function ProtectedRoute({ children, role }) {\r\n  const token = localStorage.getItem('token')\r\n  if (!token) {\r\n    // not logged in\r\n    return <Navigate to=\"/login\" replace />\r\n  }\r\n\r\n  let payload\r\n  try {\r\n    payload = jwtDecode(token)\r\n  } catch (err) {\r\n    // bad token\r\n    console.error('Invalid JWT:', err)\r\n    localStorage.removeItem('token')\r\n    return <Navigate to=\"/login\" replace />\r\n  }\r\n\r\n  // if we require a specific role, but the user doesn't have it:\r\n  if (role && payload.role !== role) {\r\n    return <Navigate to=\"/\" replace />\r\n  }\r\n\r\n  // everything’s OK:\r\n  return children\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,SAAS,QAAQ,YAAY;;AAEtC;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,eAAe,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC;AAAK,CAAC,EAAE;EACzD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;IACV;IACA,oBAAOJ,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,IAAIC,OAAO;EACX,IAAI;IACFA,OAAO,GAAGf,SAAS,CAACM,KAAK,CAAC;EAC5B,CAAC,CAAC,OAAOU,GAAG,EAAE;IACZ;IACAC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC;IAClCT,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChC,oBAAOjB,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;;EAEA;EACA,IAAIT,IAAI,IAAIU,OAAO,CAACV,IAAI,KAAKA,IAAI,EAAE;IACjC,oBAAOH,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpC;;EAEA;EACA,OAAOV,QAAQ;AACjB;AAACgB,EAAA,GAxBuBjB,cAAc;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}