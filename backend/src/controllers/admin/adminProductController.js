import Book from '../../models/Book.js';

export const addBook = async (req, res, next) => {
    try {
        // bookID should be auto-generated by DB or managed carefully
        // Validation of req.body fields is crucial here
        const {
            book_name, author, description, price, stock, book_type,
            category, page_number, publisher, publication_year,
            edition_no, edition_year, book_promotionID, image
        } = req.body;

        if (!book_name || !author || !price || !book_type || !category || !page_number || !publisher || !publication_year) {
            res.status(400);
            throw new Error('Missing required book fields.');
        }

        const newBook = await Book.create({
            book_name, author, description, price, stock, book_type,
            category, page_number, publisher, publication_year,
            edition_no, edition_year, book_promotionID, image // image handling is complex
        });
        res.status(201).json(newBook);
    } catch (error) {
        next(error);
    }
};

export const updateBook = async (req, res, next) => {
    try {
        const { id } = req.params;
        const book = await Book.findById(id);
        if (!book) {
            res.status(404);
            throw new Error('Book not found.');
        }
        // Sanitize req.body, only allow updatable fields
        const allowedUpdates = [
            'book_name', 'author', 'description', 'price', 'stock', 'book_type',
            'category', 'page_number', 'publisher', 'publication_year',
            'edition_no', 'edition_year', 'book_promotionID', 'image'
        ];
        const updateData = {};
        allowedUpdates.forEach(key => {
            if (req.body[key] !== undefined) {
                updateData[key] = req.body[key];
            }
        });

        if (Object.keys(updateData).length === 0) {
            return res.status(400).json({ message: "No update fields provided." });
        }

        const result = await Book.update(id, updateData);
        if (result.affectedRows > 0) {
            const updatedBook = await Book.findById(id);
            res.json(updatedBook);
        } else {
            // Could be that data sent was same as existing data, or book not found (though checked)
            res.json({ message: "Book updated or no changes made.", details: result });
        }
    } catch (error) {
        next(error);
    }
};

export const deleteBook = async (req, res, next) => {
    try {
        const { id } = req.params;
        const success = await Book.deleteById(id);
        if (success) {
            res.json({ message: 'Book deleted successfully.' });
        } else {
            res.status(404);
            throw new Error('Book not found or could not be deleted.');
        }
    } catch (error) {
        next(error);
    }
};

// Product listing for admin is usually same as public, or with more details
export const getAllBooksAdmin = async (req, res, next) => {
    try {
        const books = await Book.findAll(req.query); // Re-use existing function
        res.json(books);
    } catch (error) {
        next(error);
    }
};